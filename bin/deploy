#!/bin/bash

function usage()
{
	echo
	echo "Usage: deploy [-rsuyabm] [-p <file>] [-i <file>] [-L <release tag>] [path] [release branch]"
	echo
	echo "-r Reset the database (THIS WILL DELETE ALL EXISTING DATA)"
	echo "-s Import the sample data from the sample repo"
	echo "-p Import pre-load SQL file before anything else"
	echo "-u Update repos (git pull) and ensure they're on the release branch"
	echo "-y Don't prompt to continue, just do it"
	echo "-i Import additional SQL files (can be specified multiple times)"
	echo "-a Import additional SQL files after deployment scripts"
	echo "-b Import additional SQL files before deployment scripts (default)"
	echo "-m Import reference data from preconfigured url path (excluding users, always done before newer migrations)"
	echo "-n Import reference data from preconfigured url path (including users, always done before newer migrations))"
	echo "-L Live deployment to the specified release tag. Repos will be checked out to the tag, deploy scripts will be run from the release branch."
	echo
	echo "You can omit the path if you are currently in an OpenEyes directory tree."
	echo "If you omit the release branch it will use whatever branch the core repo is on."
	echo
	echo "For -m and -n to work you need to create $HOME/.deploy.conf with lines like:"
	echo
	echo "all:http://path/to/ref_all.sql"
	echo "all-users:http://path/to/ref_all_users.sql"
	echo
	echo "Examples:"
	echo
	echo "deploy -r /var/www/master master"
	echo "deploy -rsu /var/www/glaucoma-2.1 feature/glaucoma-2.1"
	echo "deploy -rsb -i file1 -i file2 -i file3 /var/www/test-instance master"
	echo "deploy -rsbi file1 -i file2 /var/www/develop develop"
	echo
	exit 0
}

function checkout_and_update()
{
	cd "$path"

	echo -n "core: "

	if [ $release_tag == false ] ; then
		echo -n "checking branch.. "

		do_checkout
	else
		echo -n "checking tag.. "

		commit=$release_tag
		do_checkout_commit
	fi

	echo -n "checking for updates.. "

	do_pull

	echo "ok"

	for module in `ls -1 modules/`
	do
		cd "$path/modules/$module"

		if [ "$module" != "deploy" ] ; then
			echo -n "$module: "

			if [ $release_tag == false ] ; then
				do_checkout
			else
				do_checkout_commit
			fi

			do_pull

			echo "ok"
		fi
	done
}

function do_checkout()
{
	git fetch --tags 1>/dev/null 2>/dev/null

	x=`git branch |grep "$branch"`

	if [ -z "$x" ] ; then
		echo -n "checking out branch.. "
		r=`git checkout -b $branch --track origin/$branch 2>&1`
		x=`echo "$r" | grep 'which can not be resolved as commit'`

		if [ ! -z "$r" ] ; then
			echo -n "branch doesn't exist.. "
		else
			echo
			echo "Errors encountered:"
			echo
			echo "$r"
			exit
		fi
	else
		x=`git branch |egrep "^\\* $branch"`
		if [ -z "$x" ] ; then
			echo -n "checking out branch.. "
			r=`git checkout $branch 2>&1`
			x=`echo "$r" |grep 'Switched to branch'`
			if [ -z "$x" ] ; then
				echo
				echo "Errors encountered:"
				echo
				echo "$r"
				exit
			fi
		else
			echo -n "already on branch.. "
		fi
	fi
}

function do_checkout_commit()
{
	git fetch --tags 1>/dev/null 2>/dev/null

	r=`git checkout $commit 2>&1`
	x=`echo "$r" |egrep '^HEAD is now at'`
	if [ -z "$x" ] ; then
		echo
		echo "Errors encountered:"
		echo
		echo "$r"
		exit
	fi
}

function do_pull()
{
	r=`git pull 2>&1`
	if [ "$r" != "Already up-to-date." ] ; then
		x1=`echo "$r" | grep 'fatal:'`
		x2=`echo "$r" | grep 'error:'`
		if [ ! -z "$x1" ] || [ ! -z "$x2" ] ; then
			echo
			echo "Errors encountered:"
			echo
			echo "$r"
			echo
			exit
		fi
	fi
}

function migrate_all()
{
	echo -n "core: "

	cd "$path"

	module=""

	do_migrate

	echo "ok"

	for module in `ls -1 modules/`
	do
		if [ -e "$path/modules/$module/migrations" ] ; then
			if [ "$module" != "deploy" ] ; then
				echo -n "$module: "
				do_migrate
				echo "ok"
			fi
		fi
	done
	rm -rf "$path/../assets/*"
}

function do_migrate()
{
	if [ "$module" == "" ] ; then
		r=`echo 'yes' |./yiic migrate 2>&1`
	else
		r=`echo 'yes' |./yiic migrate --migrationPath=application.modules.$module.migrations 2>&1`
	fi

	x=`echo "$r" |grep 'Stack trace:'`
	if [ ! -z "$x" ] ; then
		echo "failed"
		echo "$r"
		exit
	fi
}

function get_mysql()
{
	if [ -e "$HOME/.mysql_password" ] ; then
		mysql_pass=`cat "$HOME/.mysql_password"`
		mysql="mysql -uroot --password=$mysql_pass"
	else
		mysql="mysql -uroot"
	fi
}

function verify_mysql()
{
	x=`echo "$r" |grep 'Access denied'`
	if [ ! -z "$x" ] ; then
		echo
		echo "MySQL password is incorrect. Please ensure your root MySQL password is in $HOME/.mysql_password"
		echo
		exit
	fi

	x=`echo "$r" |grep "Can't drop database"`
	if [ ! -z "$x" ] ; then
		echo
		echo "$r"
		echo
		return
	fi

	x=`echo "$r" |grep 'ERROR'`
	if [ ! -z "$x" ] ; then
		echo
		echo "Something went wrong executing the last MySQL command:"
		echo
		echo "$r"
		echo
		exit
	fi
}

function import_additional_files()
{
	for i in "${import_files[@]}"
	do
		echo -n "Importing: $i ... "
		r=`cat "$i" | $mysql 2>&1`
		verify_mysql
		echo "ok"
	done
}

function import_from_url()
{
	echo -n "Importing remote sql data: $import_url ... "
	r=`wget -qO- "$import_url" | gunzip | $mysql -D $db 2>&1`
	verify_mysql
	echo "ok"
}

function load_deploy_config()
{
	if [ ! -e "$HOME/.deploy.conf" ] ; then
		echo "$HOME/.deploy.conf doesn't exist."
		exit 0
	fi

	if [ $import_ref_all == true ] ; then
		import_url=`cat "$HOME/.deploy.conf" |egrep '^all:' |sed 's/^all://'`
	else
		import_url=`cat "$HOME/.deploy.conf" |egrep '^all-users:' |sed 's/^all://'`
	fi

	commit_url=`cat "$HOME/.deploy.conf" |egrep '^commits:' |sed 's/^commits://'`
}

path=`echo -n \`pwd |sed 's/\/protected.*$//'\` ; echo "/protected"`

reset=false
sampledata=false
update=false
prompt=true
next_preload=false
preloadfile=false
next_importfile=false
import_files=()
import_files_after=false
path_set=false
import_ref_all=false
import_ref_all_users=false
release_tag=false
next_release_tag=false

for var in "$@"
do
	if [ $next_importfile == true ] ; then
		import_files+=($var)
		next_importfile=false
		continue
	fi

	if [ $next_preload == true ] ; then
		preloadfile=$var
		next_preload=false
		continue
	fi

	if [ $next_release_tag == true ] ; then
		release_tag=$var
		next_release_tag=false
		continue
	fi

	if [ ${var:0:1} == "-" ] ; then
		i=1
		while [ $i -lt ${#var} ]
		do
			if [ ${var:$i:1} == "r" ] ; then
				reset=true
			elif [ ${var:$i:1} == "s" ] ; then
				sampledata=true
			elif [ ${var:$i:1} == "u" ] ; then
				update=true
			elif [ ${var:$i:1} == "h" ] ; then
				usage
			elif [ ${var:$i:1} == "y" ] ; then
				prompt=false
			elif [ ${var:$i:1} == "p" ] ; then
				next_preload=true
			elif [ ${var:$i:1} == "i" ] ; then
				next_importfile=true
			elif [ ${var:$i:1} == "a" ] ; then
				import_files_after=true
			elif [ ${var:$i:1} == "b" ] ; then
				import_files_after=false
			elif [ ${var:$i:1} == "m" ] ; then
				if [ $import_ref_all_users == true ] ; then
					echo "-m and -n cannot be used together."
					exit 0
				fi
				import_ref_all=true
			elif [ ${var:$i:1} == "n" ] ; then
				if [ $import_ref_all == true ] ; then
					echo "-m and -n cannot be used together."
					exit 0
				fi
				import_ref_all_users=true
			elif [ ${var:$i:1} == "L" ] ; then
				next_release_tag=true
			fi

			i=$((i+1))
		done
	else
		if [ "$branch" == "" ] ; then
			branch=$var
		else
			path=$branch
			branch=$var
			path_set=true
		fi
	fi
done

if [ -e "$path/protected" ] ; then
	path="$path/protected"
fi

if [ ! -e "$path/yiic.php" ] ; then
	if [ $path_set == false ] ; then
		usage
	else
		echo
		echo "OpenEyes instance not found at path: $path"
		echo
		exit
	fi
fi

if [ "$branch" == "" ] ; then
	cd $path
	branch=`git branch |egrep '^\*' |cut -d ' ' -f2`

	if [ "$branch" == "(detached" ] ; then
		echo
		echo "No release branch specified and core is in detached HEAD state. Unable to continue."
		echo
		exit 0
	fi
fi

if [ ${#import_files} != 0 ] ; then
	for i in "${import_files[@]}"
	do
		if [ ! -e "$i" ] ; then
			echo "File not found: $i"
			exit 0
		fi
	done
fi

if [ $import_ref_all == true ] || [ $import_ref_all_users == true ] ; then
	load_deploy_config
fi

if [ $prompt == true ] ; then
	while true; do
		echo
		if [ $release_tag == false ] ; then
			echo "This will deploy branch $branch to the instance at $path"
		else
			echo "This will deploy tag $release_tag to the instance at $path using deploy scripts from branch $branch"
			echo
			echo "This is a live deployment."
		fi
		echo
		echo -n "Reset database: "
		if [ $reset == true ] ; then
			echo "YES"
		else
			echo "NO"
		fi
		if [ ! $preloadfile == false ] ; then
			echo -n "Preload database with: "
			echo "$preloadfile" 
		fi
		echo -n "Import sample data: "
		if [ $sampledata == true ] ; then
			echo "YES"
		else
			echo "NO"
		fi
		echo -n "Checkout and update repos: "
		if [ $update == true ] ; then
			echo "YES"
		else
			echo "NO"
		fi
		if [ ${#import_files} != 0 ] ; then
			echo -n "Import additional files"
			if [ $import_files_after == true ] ; then
				echo -n " after deploy scripts: "
			fi
			if [ $import_files_after == false ] ; then
				echo -n " before deploy scripts: "
			fi
			for i in "${import_files[@]}"
			do
				echo -n "$i "
			done
			echo
		fi
		if [ $import_ref_all == true ] ; then
			echo "Import reference data (without users) from: $import_url"
		elif [ $import_ref_all_users == true ] ; then
			echo "Import reference data (with users) from: $import_url"
		fi
		echo
		read -p "Continue? " yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) exit;;
			* ) echo;echo "Please answer yes or no.";;
		esac
	done
fi

db=`cat $path/config/local/common.php |grep ';dbname=' |sed 's/.*dbname=//' |cut -d "'" -f1 |cut -d '"' -f1 |head -n1`

if [ $import_ref_all == true ] || [ $import_ref_all_users == true ] ; then
	echo
	echo -n "Checking repos out to reference data hashes ... "
	commits=`wget -qO- "$commit_url"`
	commit_list=$(echo $commits | tr ";" "\n")

	for item in $commit_list
	do
		repo=`echo "$item" |sed 's/:.*$//'`
		commit=`echo "$item" |sed 's/^.*://'`

		if [ "$repo" == "core" ] ; then
			cd "$path"
		else
			if [ ! -e "$path/modules/$repo" ] ; then
				echo "failed"
				echo "Path not found: $path/modules/$repo"
				exit 0
			fi
			cd "$path/modules/$repo"
		fi
		do_checkout_commit
	done
	echo "ok"
	echo
fi

get_mysql

if [ $reset == true ] ; then
	echo
	echo -n "Dropping $db ... "
	r=`echo "drop database \\\`$db\\\`;" | $mysql 2>&1`
	verify_mysql
	echo "ok"

	echo -n "Creating $db ... "
	r=`echo "create database \\\`$db\\\`;" | $mysql 2>&1`
	verify_mysql
	echo "ok"

	echo
fi

if [ ! $preloadfile == false ] ; then
	echo -n "Importing preload file: $preloadfile ... "
	r=`cat "$preloadfile" | $mysql -D $db 2>&1`
	verify_mysql
	echo "ok"
	echo
fi

if [ $sampledata == true ] ; then
	echo -n "Importing sample data ... "
	r=`cat "$path/modules/sample/sql/openeyes+ophtroperationbooking.sql" | $mysql -D $db 2>&1`
	verify_mysql
	echo "ok"
	echo
fi

if [ $update == true ] ; then
	if [ $import_ref_all == false ] && [ $import_ref_all_users == false ] ; then
		if [ $release_tag == false ] ; then
			echo "Updating repos and checking out to target release branch: $branch ... "
		else
			echo "Updating repos and checking out to target release tag: $release_tag ... "
		fi
		echo
		checkout_and_update
		echo
	fi
fi

echo "Running migrations ... "
echo
migrate_all
migrate_all
echo

echo "Nuking cache and asset directories ... "
rm -rf "$path/../cache/*" "$path/cache/*"
rm -rf "$path/../assets/*"
echo

if [ $import_ref_all == true ] || [ $import_ref_all_users == true ] ; then
	import_from_url
fi

if [ $import_ref_all == true ] || [ $import_ref_all_users == true ] ; then
	if [ $update == true ] ; then
		echo "Updating repos and checking out to target release branch: $branch ... "
		echo
		checkout_and_update
		echo
	else
		echo "Switching repos back to target release branch: $branch ... "
		for item in $commit_list
		do
			repo=`echo "$item" |sed 's/:.*$//'`

			if [ "$repo" == "core" ] ; then
				cd "$path"
			else
				if [ ! -e "$path/modules/$repo" ] ; then
					echo "failed"
					echo "Path not found: $path/modules/$repo"
					exit 0
				fi
				cd "$path/modules/$repo"
			fi
			do_checkout
		done
	fi
	echo "Running migrations ... "
	echo
	migrate_all
	migrate_all
	echo
fi

if [ ${#import_files} != 0 ] ; then
	if [ $import_files_after == false ] ; then
		import_additional_files
		echo
	fi
fi

if [ ! -e "$path/modules/deploy" ] ; then
	echo "Checking out deploy repo into target instance directory ... "
	echo
	cd "$path/modules"
	git clone https://github.com/openeyes/deploy
	echo
fi

echo "Checking deploy repo out to target release branch: $branch ... "
echo
cd "$path/modules/deploy"
do_checkout
do_pull

echo "Running deployment for: $branch ... "
echo yes |./yiic migrate
echo
echo "$branch has been deployed to the instance at: $path"
echo

if [ ${#import_files} != 0 ] ; then
	if [ $import_files_after == true ] ; then
		import_additional_files
		echo
	fi
fi
